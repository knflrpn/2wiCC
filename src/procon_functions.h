/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 KNfLrPn
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

 static const uint8_t spi0x2000[144] = {
	0x00, 0x22, 0x84, 0x6E, 0xDC, 0x68, 0xEB, 0x69,
	0xD4, 0xC2, 0x5C, 0x61, 0x49, 0xE3, 0xDE, 0xAE,
	0x18, 0x52, 0x2A, 0x75, 0xD3, 0x53, 0x14, 0xF2,
	0xA7, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x95, 0x22,
	0x30, 0xB2, 0x8C, 0xC6, 0x81, 0x1A, 0x3A, 0x4B,
	0x1A, 0x1E, 0xBB, 0x5D, 0x1C, 0xC7, 0x41, 0xD9,
	0x5E, 0xC8, 0xBA, 0x21, 0x18, 0x9C, 0xAE, 0x3B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

static const uint8_t spi0x6000[256] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6000 - 0x6007 // Serial number (none)
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6008 - 0x600F // Serial number (none)
	0xFF, 0xFF, 0x03, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6010 - 0x6017 // 6012=3 (procon)
	0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6018 - 0x601F // 601B=1 (color data later)
	// Speific fo 2wiCC:
	// Acc origin position X: 0000, Y: 0000, Z: 0100
	// Default sensitivity
	// Gyro origin: all 0
	// Default sensitivity
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, // 0x6020 - 0x6027 // 6Axis cal data
	0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, // 0x6028 - 0x602F // 6Axis cal data
	0x00, 0x00, 0x3B, 0x34, 0x3B, 0x34, 0x3B, 0x34, // 0x6030 - 0x6037 // 6Axis cal data
	//  x603D - x6045 	Left analog stick calibration
	//	x6046 - x604E 	Right analog stick calibration
	// Specific for 2wiCC: center 800, max,min 600
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x06, 0x60, // 0x6038 - 0x603F
	0x00, 0x08, 0x80, 0x00, 0x06, 0x60, 0x00, 0x08, // 0x6040 - 0x6047
	0x80, 0x00, 0x06, 0x60, 0x00, 0x06, 0x60, 0xFF, // 0x6048 - 0x604F
	//	x6050 - x6052 	Body #RGB color, 24-bit
	//	x6053 - x6055 	Buttons #RGB color, 24-bit
	//	x6056 - x6058 	Left Grip #RGB color, 24-bit
	//	x6059 - x605B 	Right Grip #RGB color, 24-bit
	// Specific for 2wiCC: dark red body, light red buttons
	0x62, 0x12, 0x12, 0xFF, 0x00, 0x00, 0xF0, 0xF0, // 0x6050 - 0x6057
	0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6058 - 0x605F
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6060 - 0x6067
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6068 - 0x606F
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6070 - 0x6077
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x6078 - 0x607F
	// x6080-x6085 	6-Axis Horizontal Offsets. (JC sideways)
	// x6086-x6097 	Stick device parameters 1
	// Specific for 2wiCC: stick deadzone 6
	0x50, 0xFD, 0x00, 0x00, 0xC6, 0x0F, 0x0F, 0x30, // 0x6080 - 0x6087
	0x61, 0x06, 0x30, 0xF3, 0xD4, 0x14, 0x54, 0x41, // 0x6088 - 0x608F
	0x15, 0x54, 0xC7, 0x79, 0x9C, 0x33, 0x36, 0x63, // 0x6090 - 0x6097
	// x6098-x60A9 	Stick device parameters 2 (copy of param 1).
	0x0F, 0x30, 0x61, 0x06, 0x30, 0xF3, 0xD4, 0x14, // 0x6098 - 0x609F
	0x54, 0x41, 0x15, 0x54, 0xC7, 0x79, 0x9C, 0x33, // 0x60A0 - 0x60A7
	0x36, 0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60A8 - 0x60AF
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60B0 - 0x60B7
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60B8 - 0x60BF
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60C0 - 0x60C7
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60C8 - 0x60CF
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60D0 - 0x60D7
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60D8 - 0x60DF
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60E0 - 0x60E7
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60E8 - 0x60EF
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 0x60F0 - 0x60F7
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF	// 0x60F8 - 0x60FF
};

// Of note: procon, use colors in spi flash
unsigned char device_info_response[64] = {
	0x21,
	0x00,
	0x91,
	0x00,
	0x80,
	0x00,
	0x00,
	0x08,
	0x80,
	0x00,
	0x08,
	0x80,
	0x70,
	0x82,
	0x02, // response to 02 subcommand
	0x04, // firmware version
	0x32, // firmware version
	0x03, // Procon
	0x02, // 02
	0x64, // MAC
	0xb5, // MAC
	0xc9, // MAC
	0x3e, // MAC
	0x91, // MAC
	0xe6, // MAC
	0x01, // 01
	0x01, // Colors in SPI
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
};

const uint8_t mac_response[] = {
	0x81,
	0x01,
	0x00,
	0x03,
	0x64,
	0xb5,
	0xc9,
	0x3e,
	0x91,
	0xe6,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
};

const uint8_t bt_data_01[] = {
	0x21, 0xf6, 0x81, 0x00, 0x80, 0x00, 0x8f, 0xf8, 0x7a, 0x54, 0x58, 0x78, 0x00, 0x81, 0x01, 0x01, /* !.......zTXx.... */
	0xc1, 0xc9, 0x3e, 0xe9, 0xb6, 0x98, 0x00, 0x25, 0x08, 0x50, 0x72, 0x6f, 0x20, 0x43, 0x6f, 0x6e, /* ..>....%.Pro Con */
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, /* troller......h.. */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ................ */
};

const uint8_t bt_data_02[] = {
	0x21,
	0xfd,
	0x81,
	0x00,
	0x80,
	0x00,
	0x90,
	0xe8,
	0x7a,
	0x53,
	0x58,
	0x78,
	0x00,
	0x81,
	0x01,
	0x02, /* !.......zSXx.... */
	0xe5,
	0xc8,
	0xe4,
	0x92,
	0x05,
	0xff,
	0xc9,
	0x8a,
	0x7d,
	0xea,
	0x15,
	0xf6,
	0x19,
	0xba,
	0x82,
	0x13, /* ........}....... */
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00, /* ................ */
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
};

const uint8_t bt_data_03[] = {
	0x21,
	0x05,
	0x81,
	0x00,
	0x80,
	0x00,
	0x90,
	0xc8,
	0x7a,
	0x53,
	0x58,
	0x78,
	0x00,
	0x81,
	0x01,
	0x03,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
};
